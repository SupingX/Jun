package com.mycj.massage;

import java.util.ArrayList;
import java.util.List;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Binder;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.service.notification.NotificationListenerService;
import android.service.notification.StatusBarNotification;
import android.text.TextUtils;
import android.util.Log;

public class NotifycationService extends NotificationListenerService {
	
	private static final String TAG = "SevenNLS";  
    private static final String TAG_PRE = "[" + NotifycationService.class.getSimpleName() + "] ";  
    private static final int EVENT_UPDATE_CURRENT_NOS = 0;  
    public static final String ACTION_NLS_CONTROL = "com.seven.notificationlistenerdemo.NLSCONTROL";  
    //用于存储当前所有的Notification的StatusBarNotification对象数组  
    public static List<StatusBarNotification[]> mCurrentNotifications = new ArrayList<StatusBarNotification[]>();  
    public static int mCurrentNotificationsCounts = 0;  
    //收到新通知后将通知的StatusBarNotification对象赋值给mPostedNotification  
    public static StatusBarNotification mPostedNotification;  
    //删除一个通知后将通知的StatusBarNotification对象赋值给mRemovedNotification  
    public static StatusBarNotification mRemovedNotification;  
    private CancelNotificationReceiver mReceiver = new CancelNotificationReceiver();  
	
    private Handler mMonitorHandler = new Handler() {  
        @Override  
        public void handleMessage(Message msg) {  
            switch (msg.what) {  
                case EVENT_UPDATE_CURRENT_NOS:  
                    updateCurrentNotifications();  
                    break;  
                default:  
                    break;  
            }  
        }  
    }; 
    
    class CancelNotificationReceiver extends BroadcastReceiver {  
    	  
        @Override  
        public void onReceive(Context context, Intent intent) {  
            String action;  
            if (intent != null && intent.getAction() != null) {  
                action = intent.getAction();  
                if (action.equals(ACTION_NLS_CONTROL)) {  
                    String command = intent.getStringExtra("command");  
                    if (TextUtils.equals(command, "cancel_last")) {  
                        if (mCurrentNotifications != null && mCurrentNotificationsCounts >= 1) {  
                            //每次删除通知最后一个  
                            StatusBarNotification sbnn = getCurrentNotifications()[mCurrentNotificationsCounts - 1];  
                            cancelNotification(sbnn.getPackageName(), sbnn.getTag(), sbnn.getId());  
                        }  
                    } else if (TextUtils.equals(command, "cancel_all")) {  
                        //删除所有通知  
                        cancelAllNotifications();  
                    }  
                }  
            }  
        }  
  
    }  
    
    @Override
    public void onCreate() {
    	super.onCreate();
    	IntentFilter filter = new IntentFilter();  
        filter.addAction(ACTION_NLS_CONTROL);  
        registerReceiver(mReceiver, filter);  
        /在onCreate时第一次调用getActiveNotifications()  
        mMonitorHandler.sendMessage(mMonitorHandler.obtainMessage(EVENT_UPDATE_CURRENT_NOS));  
    }
    
    
	@Override
	public void onNotificationRemoved(StatusBarNotification sbn) {
		Log.e("xpl", "onNotificationRemoved，删除通知");
	}
	
	@Override
	public void onNotificationPosted(StatusBarNotification sbn) {
		Log.e("xpl", "onNotificationPosted，接受通知");
	}
	
	
	
	
}
